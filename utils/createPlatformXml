#!/usr/bin/python

import networkx as nx
from networkx.drawing.nx_pydot import write_dot
import lxml.etree as et
import argparse
import enum
from tempfile import NamedTemporaryFile
import os

CustomEnumType = enum.Enum("CustomEnumType", ("Full", "Dijkstra", "DijkstraCache"))

parser = argparse.ArgumentParser(description = 'Create a platform xml file which will be compliant with SimGrid 4.1')
parser.add_argument('--file', type = str, help = 'the file where to store the produdeced xml', required = True)
parser.add_argument('--hosts_count', type = int, help = 'Number of hosts in the platform', required = True)
parser.add_argument('--edges', type = int, help = 'Number of edges to attach from a new host to an existing host', required = True)
parser.add_argument('--seed', type = int, help = 'Seed for networkx graph generator', required = False)
parser.add_argument("--routing", type = str, action = "store", choices = tuple(t.name for t in CustomEnumType), default = CustomEnumType.Full.name)

args = parser.parse_args()

def get_xml_header():
    return '<?xml version="1.0" encoding="UTF-8"?>'

def get_doctype_header():
    return '<!DOCTYPE platform SYSTEM "http://simgrid.gforge.inria.fr/simgrid/simgrid.dtd">'

def add_route_between_hosts(G, zone, origin, destiny):
    route = et.Element('route')
    route.set('src', 'node-%s' % origin)
    route.set('dst', 'node-%s' % destiny)
    route.set('symmetrical', 'NO')
    zone.append(route)
    path = nx.shortest_path(G, origin, destiny)
    for i in range(0, len(path) - 1):
        src_node = path[i]
        dst_node = path[i + 1]
        edge_id = G[src_node][dst_node]['id']
        link_ctn = et.Element('link_ctn')
        link_ctn.set('id','l%s' % edge_id)
        route.append(link_ctn)

def add_zone_nodes(zone):
    G = nx.barabasi_albert_graph(args.hosts_count, args.edges, args.seed)
    for n in G.nodes():
        host = et.Element('host')
        host.set('id', 'node-%s' % n)
        host.set('speed', '1Gf')
        zone.append(host)
        edge_number = 0
    for e in G.edges():
        (origin, destiny) = e
        G.add_edge(origin, destiny, id = edge_number)
        link = et.Element('link')
        link.set('id', 'l%s' % edge_number)
        link.set('bandwidth', '100MBps')
        link.set('latency', '10ms')
        zone.append(link)
        edge_number += 1
    if CustomEnumType.Full.name == args.routing:
        for origin in range(0, args.hosts_count):
            for destiny in range(origin + 1, args.hosts_count):
                add_route_between_hosts(G, zone, origin, destiny)
                add_route_between_hosts(G, zone, destiny, origin)
    else:
        for e in G.edges():
            (origin, destiny) = e
            add_route_between_hosts(G, zone, origin, destiny)
            add_route_between_hosts(G, zone, destiny, origin)

def getTempFilenameWithXmlAndDoctypeHeaders():
    headers = '%s\n%s\n<platform version="4.1"></platform>\n' % (get_xml_header(), get_doctype_header())
    f = NamedTemporaryFile(delete=False)
    f.write(headers)
    f.close()
    return f.name

def generate_platform():
    tempFilename = getTempFilenameWithXmlAndDoctypeHeaders()
    tree = et.parse(tempFilename)
    root = tree.getroot()
    zone = et.Element('zone')
    zone.set('id', 'AS0')
    zone.set('routing', args.routing)
    add_zone_nodes(zone)
    root.append(zone)
    tree.write(args.file, xml_declaration=True, encoding="utf-8")
    os.unlink(tempFilename)


generate_platform()
