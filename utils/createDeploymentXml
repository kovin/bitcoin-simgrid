#!/usr/bin/python

import networkx as nx
import lxml.etree as et
import argparse
import re
import random
import json
import os
import shutil

parser = argparse.ArgumentParser(description = 'Create a platform xml for the bitcoin-simgrid project')
parser.add_argument('--data_dir', type = str, help = 'the directory for the produced deployment xml and individual nodes data json files', required = True)
parser.add_argument('--nodes_count', type = int, help = 'the number of nodes involved in the simulation', required = True)
parser.add_argument('--peers_count', type = int, help = 'the number of peers each node will have', required = True)
parser.add_argument('--txs_per_day', type = int, help = 'number of expected total transactions in the system per day', required = True)
parser.add_argument('--difficulty', type = int, help = 'the current network difficulty to mine a block', required = True)
parser.add_argument('--miners_ratio', type = int, help = 'a number between 0 an 100 for the ratio of miner in relation to nodes_count', required = False, default = 5)
parser.add_argument('--seed', type = int, help = 'Seed for random module', required = False)

args = parser.parse_args()
random.seed(args.seed)

def create_nodes(root):
    node_types = ['miner' if random.random() * 100 < args.miners_ratio else 'node' for x in range(0, args.nodes_count)]
    #G = nx.connected_watts_strogatz_graph(args.nodes_count, args.peers_count, .2, tries=100, seed=args.seed)
    G = nx.barabasi_albert_graph(args.nodes_count, args.peers_count, seed=args.seed)
    for node_id in G.nodes():
        node = et.Element('actor')
        node.set('host', 'node-' + str(node_id))
        peers = [peer_id for peer_id in list(G.adj[node_id])]
        node_data = {
            'peers': map(int, peers),
            'event_probability': 1.0 / args.nodes_count,
            'txs_per_day': args.txs_per_day
        }
        node_type = node_types[node_id]
        if node_type == 'miner':
            node_data['difficulty'] = args.difficulty
            node_data['hashrate'] = (25130091717 / 100 * args.miners_ratio) * 10 ** 9
        node.set('function', node_type)
        node_id_argument = et.Element('argument')
        node_id_argument.set('value', str(node_id))
        node.append(node_id_argument)
        root.append(node)
        node_data_file = open('%s/%s_data-%s' % (args.data_dir, node_type, node_id) , 'w')
        json.dump(node_data, node_data_file)
        node_data_file.close()

def create_directory():
    shutil.rmtree(args.data_dir, True)
    os.makedirs(args.data_dir)

def create():
    root = et.Element('platform')
    root.set('version', '4.1')
    create_directory()
    create_nodes(root)
    tree = et.ElementTree(root)
    tree.docinfo.system_url = 'http://simgrid.gforge.inria.fr/simgrid/simgrid.dtd'
    tree.write(args.data_dir + '/deployment.xml', xml_declaration = True, encoding = "utf-8")

create()
