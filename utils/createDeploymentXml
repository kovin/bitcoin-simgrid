#!/usr/bin/python

import networkx as nx
import lxml.etree as et
import argparse
from tempfile import NamedTemporaryFile
import os
import re
import random

parser = argparse.ArgumentParser(description = 'Create a platform xml for the bitcoin-simgrid project')
parser.add_argument('--file', type = str, help = 'the name of the produced xml', required = True)
parser.add_argument('--nodes_count', type = int, help = 'the number of nodes involved in the simulation', required = True)
parser.add_argument('--peers_count', type = int, help = 'the number of peers each node will have', required = True)
parser.add_argument('--miners_ratio', type = int, help = 'a number between 0 an 100 for the ratio of miner in relation to nodes_count', required = False, default = 5)
parser.add_argument('--seed', type = int, help = 'Seed for random module', required = False)

args = parser.parse_args()
random.seed(args.seed)

root = et.Element('platform')
root.set('version', '4.1')

def add_nodes(root):
    G = nx.connected_watts_strogatz_graph(args.nodes_count, args.peers_count, .2, tries=100, seed=args.seed)
    for node_id in G.nodes():
        node = et.Element('actor')
        node.set('host', 'node-' + str(node_id))
        node_type = 'miner' if ((int) (random.random() * 101)) <= args.miners_ratio else 'node'
        node.set('function', node_type)
        node_id_argument = et.Element('argument')
        node_id_argument.set('value', str(node_id))
        node_total_count_argument = et.Element('argument')
        node_total_count_argument.set('value', str(args.nodes_count))
        node_peers_argument = et.Element('argument')
        peers = [str(peer_id) for peer_id in list(G.adj[node_id])]
        node_peers_argument.set('value', ' '.join(peers))
        node.append(node_id_argument)
        node.append(node_total_count_argument)
        node.append(node_peers_argument)
        root.append(node)

add_nodes(root)

monitor = et.Element('actor')
monitor.set('host', 'node-%s' % args.nodes_count)
monitor.set('function', 'monitor')
root.append(monitor)

tree = et.ElementTree(root)
tree.docinfo.system_url = 'http://simgrid.gforge.inria.fr/simgrid/simgrid.dtd'
tree.write(args.file, xml_declaration = True, encoding = "utf-8")
