#!/usr/bin/python

import lxml.etree as et
import argparse
from tempfile import NamedTemporaryFile
import os
import re
import random

parser = argparse.ArgumentParser(description = 'Create a platform xml for the bitcoin-simgrid project')
parser.add_argument('--file', type = str, help = 'the name of the produced xml', required = True)
parser.add_argument('--nodes_count', type = int, help = 'the number of nodes involved in the simulation', required = True)
parser.add_argument('--peers_count', type = int, help = 'the number of peers each node will have', required = True)
parser.add_argument('--seed', type = int, help = 'Seed for random module', required = False)

args = parser.parse_args()
random.seed(args.seed)

root = et.Element('platform')
root.set('version', '4.1')

def get_peers(node_id):
    possible_peers = range(0, args.nodes_count)
    random.shuffle(possible_peers)
    peers = [str(peer_id) for peer_id in possible_peers[:args.peers_count] if peer_id != node_id]
    return ' '.join(peers)

def add_nodes(root):
    for node_id in range(0, args.nodes_count):
        node = et.Element('actor')
        node.set('host', 'node-' + str(node_id))
        node.set('function', 'node')
        node_id_argument = et.Element('argument')
        node_id_argument.set('value', str(node_id))
        node_total_count_argument = et.Element('argument')
        node_total_count_argument.set('value', str(args.nodes_count))
        node_peers_argument = et.Element('argument')
        node_peers_argument.set('value', get_peers(node_id))
        node.append(node_id_argument)
        node.append(node_total_count_argument)
        node.append(node_peers_argument)
        root.append(node)

add_nodes(root)

monitor = et.Element('actor')
monitor.set('host', 'node-%s' % args.nodes_count)
monitor.set('function', 'monitor')
root.append(monitor)

tree = et.ElementTree(root)
tree.docinfo.system_url = 'http://simgrid.gforge.inria.fr/simgrid/simgrid.dtd'
tree.write(args.file, xml_declaration = True, encoding = "utf-8")
